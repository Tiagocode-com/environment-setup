networks:
  app_network:
    driver: ${DOCKER_NETWORKS_DRIVER}

volumes:
  postgres_data:
    driver: ${DOCKER_VOLUMES_DRIVER}

  pgadmin_data:
    driver: ${DOCKER_VOLUMES_DRIVER}

  redis_data:
    driver: ${DOCKER_VOLUMES_DRIVER}

  portainer_data:
    driver: ${DOCKER_VOLUMES_DRIVER}
  
services:
  traefik:
    build:
      context: ./.docker/traefik
      dockerfile: Dockerfile
      args:
        - TRAEFIK_VERSION=${SERVICE_TRAEFIK_VERSION}
    environment:
      - CF_API_EMAIL=${SERVICE_TRAEFIK_CF_EMAIL}
      - CF_API_KEY=${SERVICE_TRAEFIK_CF_API_KEY}
    command:
      # log/
      - "--log.level=debug"
      # api
      - "--api"
      - "--api.dashboard=true"
      - "--api.insecure=false"
      # providers
      - "--providers.docker.exposedbydefault=false"
      # entrypoints
      - "--entrypoints.web_insecure.address=:80"
      - "--entrypoints.web_secure.address=:443"
      - "--entrypoints.postgres.address=:5432"
      - "--entrypoints.redis.address=:6379"
      # middleware for redirecting traffic to https
      # - "--entrypoints.web_insecure.http.redirections.entryPoint.to=web_secure"
      # - "--entrypoints.web_insecure.http.redirections.entryPoint.scheme=https"
      # - "--entrypoints.web_insecure.http.redirections.entryPoint.permanent=true"
      # tls
      - "--entrypoints.web_secure.http.tls.domains[0].main=${APPS_DOMAIN_NAME}"
      - "--entrypoints.web_secure.http.tls.domains[0].sans=*.${APPS_DOMAIN_NAME}"
      - "--certificatesresolvers.lets_encrypt.acme.storage=/data/acme.json"
      - "--certificatesresolvers.lets_encrypt.acme.dnsChallenge=true"
      - "--certificatesresolvers.lets_encrypt.acme.dnsChallenge.delayBeforeCheck=0"
      - "--certificatesresolvers.lets_encrypt.acme.dnsChallenge.provider=cloudflare"
      - "--certificatesresolvers.lets_encrypt.acme.email=${SERVICE_TRAEFIK_ACME_EMAIL}"
      - "--certificatesresolvers.lets_encrypt.acme.dnsChallenge.resolvers=${SERVICE_TRAEFIK_CF_DNS}"
      # the following line is the caserver for testing the certificates generating (comment it for prod)
      # - "--certificatesresolvers.lets_encrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      # accesslog
      - "--accesslog.filepath=/data/access.log"
    ports:
      - "80:80"
      - "443:443"
      - "5432:5432"
      - "6379:6379"
    networks:
      - app_network
    volumes:
      - ./.docker/traefik/data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    profiles:
      - development
      - production
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=web_secure"
      - "traefik.http.routers.traefik.tls.certresolver=lets_encrypt"
      - "traefik.http.routers.traefik.rule=Host(`${APPS_ENVIRONMENT}-traefik.${APPS_DOMAIN_NAME}`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.services.api@internal.loadbalancer.server.port=8888"
      - "traefik.http.routers.traefik.middlewares=access-auth"
      - "traefik.http.middlewares.access-auth.basicauth.realm=Login Required"
      - "traefik.http.middlewares.access-auth.basicauth.users=${SERVICE_TRAEFIK_USER_PASSWORD}"      

  postgres:
    restart: unless-stopped
    build:
      context: ./.docker/postgres
      dockerfile: Dockerfile
      args:
        - POSTGRES_VERSION=${SERVICE_POSTGRES_VERSION}
    environment:
      - POSTGRES_DB=${SERVICE_POSTGRES_DB}
      - POSTGRES_USER=${SERVICE_POSTGRES_USER}
      - POSTGRES_PASSWORD=${SERVICE_POSTGRES_PASSWORD}
    networks:
      - app_network
    volumes:
      - "postgres_data:/var/lib/postgresql/data"
    profiles:
      - development
      - production
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.postgres.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.postgres.service=postgres"
      - "traefik.tcp.routers.postgres.entryPoints=postgres"
      - "traefik.tcp.services.postgres.loadbalancer.server.port=5432"

  redis:
    build:
      context: ./.docker/redis
      args:
        - REDIS_VERSION=${SERVICE_REDIS_VERSION}
    command: --requirepass ${SERVICE_REDIS_PASSWORD}
    restart: always
    networks:
      - app_network
    volumes:
      - redis_data:/data
    profiles:
      - development
      - production
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.redis.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.redis.service=redis"
      - "traefik.tcp.routers.redis.entryPoints=redis"
      - "traefik.tcp.services.redis.loadbalancer.server.port=6379"

  pgadmin:
    build: 
      context: ./.docker/pgadmin
      dockerfile: Dockerfile
      args:
        - PGADMIN_VERSION=${SERVICE_PGADMIN_VERSION}
    restart: always
    environment:
      - PGADMIN_LISTEN_PORT=80
      - PGADMIN_DEFAULT_EMAIL=${SERVICE_PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${SERVICE_PGADMIN_PASSWORD}
    volumes:
      - pgadmin_data:/var/lig/pgadmin
    networks:
      - app_network
    profiles:
      - development
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.entrypoints=web_secure"
      - "traefik.http.routers.pgadmin.tls.certresolver=lets_encrypt"
      - "traefik.http.routers.pgadmin.rule=Host(`${APPS_ENVIRONMENT}-pgadmin.${APPS_DOMAIN_NAME}`)"
      - "traefik.http.services.pgadmin.loadbalancer.server.port=80"
      - "traefik.http.services.pgadmin.loadbalancer.server.scheme=http"

  redis-webui:
    build: 
      context: ./.docker/redis-webui
      args:
        - REDIS_WEBUI_VERSION=${SERVICE_REDIS_WEBUI_VERSION}
    environment:
      - REDIS_1_HOST=redis
      - REDIS_1_PORT=6379
      - REDIS_1_AUTH=${SERVICE_REDIS_PASSWORD}
      - ADMIN_USER=${SERVICE_REDIS_WEBUI_EMAIL}
      - ADMIN_PASS=${SERVICE_REDIS_WEBUI_PASSWORD}
    networks:
      - app_network
    profiles:
      - development
    depends_on:
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.webui.entrypoints=web_secure"
      - "traefik.http.routers.webui.tls.certresolver=lets_encrypt"
      - "traefik.http.routers.webui.rule=Host(`${APPS_ENVIRONMENT}-webui.${APPS_DOMAIN_NAME}`)"
      - "traefik.http.services.webui.loadbalancer.server.port=80"
      - "traefik.http.services.webui.loadbalancer.server.scheme=http"

  portainer:
    build:
      context: ./.docker/portainer
      args:
        - PORTAINER_VERSION=${SERVICE_PORTAINER_VERSION}
    extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
    networks:
      - app_network
    volumes:
      - portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.entrypoints=web_secure"
      - "traefik.http.routers.portainer.tls.certresolver=lets_encrypt"
      - "traefik.http.routers.portainer.rule=Host(`${APPS_ENVIRONMENT}-portainer.${APPS_DOMAIN_NAME}`)"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      - "traefik.http.services.portainer.loadbalancer.server.scheme=http"

  back-office:
    build: 
      context: ./.docker/back-office
      dockerfile: Dockerfile
      args:
        - RUST_VERSION=${SERVICE_RUST_VERSION}
        - CONTAINER_REGISTRY=${APPS_CONTAINER_REGISTRY}
        - BACK_OFFICE_VERSION=${APP_BACK_OFFICE_VERSION}
    networks:
      - app_network
    volumes:
      - ${APP_BACK_OFFICE_PATH_IN_HOST}:/var/www/app
    profiles:
      - development
      - production
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.back_office.entrypoints=web_secure"
      - "traefik.http.routers.back_office.tls.certresolver=lets_encrypt"
      - "traefik.http.routers.back_office.rule=Host(`${APPS_ENVIRONMENT}-admin.${APPS_DOMAIN_NAME}`)"
      - "traefik.http.services.back_office.loadbalancer.server.port=8080"
      - "traefik.http.services.back_office.loadbalancer.server.scheme=http"

  website:
    build:
      context: ./.docker/website
      args:
        - CONTAINER_REGISTRY=${APPS_CONTAINER_REGISTRY}
        - WEBSITE_VERSION=${APP_WEBSITE_VERSION}
    networks:
      - app_network
    volumes:
      - ${APP_WEBSITE_PATH_IN_HOST}:/var/www/app
    profiles:
      - development
      - production
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.website.entrypoints=web_secure"
      - "traefik.http.routers.website.tls.certresolver=lets_encrypt"
      - "traefik.http.routers.website.rule=Host(`${APPS_ENVIRONMENT}-website.${APPS_DOMAIN_NAME}`)"
      - "traefik.http.services.website.loadbalancer.server.port=3000"
      - "traefik.http.services.website.loadbalancer.server.scheme=http"