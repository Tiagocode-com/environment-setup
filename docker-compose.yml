networks:
  app_network:
    driver: ${DOCKER_NETWORKS_DRIVER}

services:
  traefik:
    build:
      context: ./docker/traefik
      dockerfile: Dockerfile
      args:
        - TRAEFIK_VERSION=${SERVICE_TRAEFIK_VERSION}
    environment:
      - CF_API_EMAIL=${SERVICE_TRAEFIK_CF_EMAIL}
      - CF_API_KEY=${SERVICE_TRAEFIK_CF_API_KEY}
    command:
      # log/
      - "--log.level=debug"
      # api
      - "--api"
      - "--api.dashboard=true"
      - "--api.insecure=false"
      # providers
      - "--providers.docker.exposedbydefault=false"
      # entrypoints
      - "--entrypoints.web_insecure.address=:80"
      - "--entrypoints.web_secure.address=:443"
      - "--entrypoints.postgres.address=:5432"
      - "--entrypoints.traefik.address=:8080"
      - "--entrypoints.redis.address=:6379"
      # middleware for redirecting traffic to https
      - "--entrypoints.web_insecure.http.redirections.entryPoint.to=web_secure"
      - "--entrypoints.web_insecure.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web_insecure.http.redirections.entryPoint.permanent=true"
      # tls
      - "--entrypoints.web_secure.http.tls.domains[0].main=${APPS_DOMAIN_NAME}"
      - "--entrypoints.web_secure.http.tls.domains[0].sans=*.${APPS_DOMAIN_NAME}"
      - "--certificatesresolvers.lets_encrypt.acme.storage=/data/acme.json"
      - "--certificatesresolvers.lets_encrypt.acme.dnsChallenge=true"
      - "--certificatesresolvers.lets_encrypt.acme.dnsChallenge.delayBeforeCheck=0"
      - "--certificatesresolvers.lets_encrypt.acme.dnsChallenge.provider=cloudflare"
      - "--certificatesresolvers.lets_encrypt.acme.email=${SERVICE_TRAEFIK_ACME_EMAIL}"
      - "--certificatesresolvers.lets_encrypt.acme.dnsChallenge.resolvers=${SERVICE_TRAEFIK_CF_DNS}"
      # the following line is the caserver for testing the certificates generating (comment it for prod)
      # - "--certificatesresolvers.lets_encrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      # accesslog
      - "--accesslog.filepath=/data/access.log"
    ports:
      - "80:80"
      - "443:443"
      - "5432:5432"
      - "6379:6379"
      - "8080:8080"
    networks:
      - app_network
    volumes:
      - ./docker/traefik/data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    profiles:
      - enabled
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=web_secure"
      - "traefik.http.routers.traefik.tls.certresolver=lets_encrypt"
      - "traefik.http.routers.traefik.rule=Host(`${APPS_ENVIRONMENT}-traefik.${APPS_DOMAIN_NAME}`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.services.api@internal.loadbalancer.server.port=8888"
      # - "traefik.http.middlewares.access-auth.basicauth.realm=Login Required"
      # - "traefik.http.middlewares.access-auth.basicauth.users=${TRAEFIK_DASHBOARD_USER}"
      # - "traefik.http.routers.traefik.middlewares=access-auth"

  back-office:
    build: 
      context: ./docker/back-office
      dockerfile: Dockerfile
      args:
        - BACK_OFFICE_VERSION=${APP_BACK_OFFICE_VERSION}
    environment:
      - RUST_VERSION=${SERVICE_RUST_VERSION}
    networks:
      - app_network
    profiles:
      - enabled
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.back_office.entrypoints=web_secure"
      - "traefik.http.routers.back_office.tls.certresolver=lets_encrypt"
      - "traefik.http.routers.back_office.rule=Host(`${APPS_ENVIRONMENT}-admin.${APPS_DOMAIN_NAME}`)"
      - "traefik.http.services.back_office.loadbalancer.server.port=8080"
      - "traefik.http.services.back_office.loadbalancer.server.scheme=http"

  postgres:
    restart: unless-stopped
    build:
      context: ./docker/postgres
      dockerfile: Dockerfile
      args:
        - POSTGRES_VERSION=${SERVICE_POSTGRES_VERSION}
    environment:
      - POSTGRES_DB=${SERVICE_POSTGRES_DB}
      - POSTGRES_USER=${SERVICE_POSTGRES_USER}
      - POSTGRES_PASSWORD=${SERVICE_POSTGRES_PASSWORD}
    networks:
      - app_network
    volumes:
      - "tiagocode_postgres:/var/lib/postgres l/data"
    profiles:
      - enabled
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.postgres.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.postgres.service=postgres"
      - "traefik.tcp.routers.postgres.entryPoints=postgres"
      - "traefik.tcp.services.postgres.loadbalancer.server.port=5432"

volumes:
  tiagocode_postgres:
    driver: ${DOCKER_VOLUMES_DRIVER}
  
  tiagocode_back_office:
    driver: ${DOCKER_VOLUMES_DRIVER}